<?xml version="1.0" encoding="UTF-8"?>
<!-- 负责系统级配置 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
       default-lazy-init="true">

    <!-- 开启自动注入-->
    <!--<context:annotation-config />-->
<!--    <context:component-scan base-package="privt.gene" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>-->
    <!-- base-package 如果多个，用“,”分隔 -->
    <!-- 启用包扫描功能，以便注册带有@controller、@Service、等注解的类成为spring的bean-->
    <context:component-scan base-package="privt.gene" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>

    <!-- maxUploadSize:文件上传的最大值以byte为单位 -->
    <!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <property name="maxUploadSize" value="1024000"></property>
    </bean>-->

    <!--引入配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath*:conf/prop/conf.properties</value>
                </list>
            </property>
        </bean>

    <bean id="dataSource" name="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="100" />
        <property name="maxIdle" value="30" />
        <property name="maxWait" value="5000" />
        <property name="defaultAutoCommit" value="true" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="60" />
        <property name="logAbandoned" value="true" />
    </bean>


    <!--
        spring集成mybatis
    -->

<!-- 事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 向类中注入值的写法
    <bean id="getAppsConfHistory" class="com.htjc.configsweb.buss.history.getHistory.GetAppsConfHistory" >
            <property name="appsConfHistory">
                <map>
                    <entry key="file" value-ref="saveHistoryByFile"/>
                    <entry key="dataBase" value-ref="saveHistoryByDataBase"/>
                </map>
            </property>
        </bean>-->
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <!-- 自动扫描mapping.xml文件 -->
<!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <property name="mapperLocations" value="classpath:conf/mybatis/mybatis.xml"></property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />-->


    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:conf/mybatis/mybatis-config.xml" /><!--classpath:mybatis-config.xml-->
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="privt.gene.model.*" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:conf/mybatis/mapper/*.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="privt.gene.dao" />
    </bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!--切面 start-->
    <!--记录方法执行时长-->
    <bean id="invokeTimeAdvice" class="privt.gene.utils.aspect.ExecuteTimeAdvice"></bean>
    <!--方法调用前后、异常及结果返回时记录日志-->
    <!--<bean id="invokeLogAdvice" class="privt.gene.utils.aspect.InvokeLogAdvice"></bean>-->
    <!--切面 end-->

</beans>
